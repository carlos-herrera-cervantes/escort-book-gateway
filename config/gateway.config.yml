http:
  port: ${HTTP_PORT}
admin:
  port: ${ADMIN_PORT}
  host: ${ADMIN_HOST}
apiEndpoints:
  api:
    host: ${API_HOST}
    paths: '/ip'
  authorizer:
    host: ${AUTHORIZER_HOST}
    paths: ['/authentication/*']
  customerProfile:
    host: ${CUSTOMER_PROFILE_HOST}
    paths: ['/customer/*']
  escortProfile:
    host: ${ESCORT_PROFILE_HOST}
    paths: ['/escort/*']
  payment:
    host: ${PAYMENT_HOST}
    paths: ['/payments/*']
  claim:
    host: ${CLAIM_HOST}
    paths: ['/claims', '/claims/*']
  tracking:
    host: ${TRACKING_HOST}
    paths: ['/tracking/*']
serviceEndpoints:
  httpbin:
    url: 'https://httpbin.org'
  authorizerService:
    url: ${AUTHORIZER_URL}
  customerProfileService:
    url: ${CUSTOMER_PROFILE_URL}
  escortProfileService:
    url: ${ESCORT_PROFILE_URL}
  paymentService:
    url: ${PAYMENT_URL}
  claimService:
    url: ${CLAIM_URL}
  trackingService:
    url: ${TRACKING_URL}
policies:
  - log
  - proxy
  - jwt
  - request-transformer
pipelines:
  default:
    apiEndpoints:
      - api
    policies:
      - proxy:
          - action:
              serviceEndpoint: httpbin 
              changeOrigin: true
  authorizerPipeline:
    apiEndpoints:
      - authorizer
    policies:
      - proxy:
          - action:
              serviceEndpoint: authorizerService 
              changeOrigin: true
  customerProfilePipeline:
    apiEndpoints:
      - customerProfile
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.id
          - action:
              headers:
                add:
                  user-type: req.user.type
          - action:
              headers:
                add:
                  firebase-token: req.user.firebaseToken
      - proxy:
          - action:
              serviceEndpoint: customerProfileService
              changeOrigin: true
  escortProfilePipeline:
    apiEndpoints:
      - escortProfile
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.id
          - action:
              headers:
                add:
                  user-type: req.user.type
          - action:
              headers:
                add:
                  firebase-token: req.user.firebaseToken
      - proxy:
          - action:
              serviceEndpoint: escortProfileService
              changeOrigin: true
  paymentPipeline:
    apiEndpoints:
      - payment
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              body:
                add:
                  user: req.user
      - proxy:
          - action:
              serviceEndpoint: paymentService
              changeOrigin: true
  claimPipeline:
      apiEndpoints:
        - claim
      policies:
        - jwt:
            - action:
                secretOrPublicKey: ${SECRET_KEY}
                checkCredentialExistence: false
        - request-transformer:
            - action:
                headers:
                  add:
                    user-id: req.user.id
            - action:
                headers:
                  add:
                    user-type: req.user.type
            - action:
                headers:
                  add:
                    firebase-token: req.user.firebaseToken
        - proxy:
            - action:
                serviceEndpoint: claimService
                changeOrigin: true
  trackingPipeline:
      apiEndpoints:
        - tracking
      policies:
        - jwt:
            - action:
                secretOrPublicKey: ${SECRET_KEY}
                checkCredentialExistence: false
        - request-transformer:
            - action:
                headers:
                  add:
                    user-id: req.user.id
            - action:
                headers:
                  add:
                    user-type: req.user.type
            - action:
                headers:
                  add:
                    firebase-token: req.user.firebaseToken
        - proxy:
            - action:
                serviceEndpoint: trackingService
                changeOrigin: true
