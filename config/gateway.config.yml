http:
  port: ${HTTP_PORT}
admin:
  port: ${ADMIN_PORT}
  host: ${ADMIN_HOST}
apiEndpoints:
  api:
    host: ${API_HOST}
    paths: '/ip'
  user:
    host: ${USER_HOST}
    paths:
      - /users/*
  authorizerWithRole:
    host: ${AUTHORIZER_HOST}
    paths: ['/authentication/users/firebase-token']
  authorizerOperations:
    host: ${AUTHORIZER_HOST}
    paths: ['/authentication/users/sign-up', '/authentication/users/roles']
  authorizer:
    host: ${AUTHORIZER_HOST}
    paths: ['/authentication/*']
  customerOperations:
    host: ${CUSTOMER_PROFILE_HOST}
    paths:
      - /customers
      - /customer/:id/profile/status
  customerProfileEscort:
    host: ${CUSTOMER_PROFILE_HOST}
    paths: ['/customer/:id/profile/avatar', '/customer/:id/profile/photos']
  customerProfile:
    host: ${CUSTOMER_PROFILE_HOST}
    paths: ['/customer/*']
  escortOperations:
    host: ${CUSTOMER_PROFILE_HOST}
    paths:
      - /escorts
      - /escort/:id/profile/identifications
      - /escort/:id/profile/status
  escortProfileCustomer:
    host: ${ESCORT_PROFILE_HOST}
    paths:
      - /escort/:id/profile/attention-sites
      - /escort/:id/profile/avatar
      - /escort/:id/profile/photos
      - /escort/:id/profile/prices
      - /escort/:id/profile
      - /escort/:id/profile/schedules
      - /escort/:id/profile/service
      - /escort/:id/profile/biography
    methods:
      - GET
  escortProfile:
    host: ${ESCORT_PROFILE_HOST}
    paths:
      - /escort/profile/*
      - /escort/profile
      - /escort/attention-site-categories
      - /escort/days
      - /escort/identification-parts
      - /escort/nationalities
      - /escort/profile-status-categories
      - /escort/service-categories
      - /escort/time-categories
  paymentOnlyUsers:
    host: ${PAYMENT_HOST}
    paths:
      - /payments/methods
    methods:
      - POST
  payment:
    host: ${PAYMENT_HOST}
    paths: ['/payments/*']
  claimWithRole:
    host: ${CLAIM_HOST}
    paths: ['/claims/:id/dictum']
  claim:
    host: ${CLAIM_HOST}
    paths: ['/claims', '/claims/*']
  tracking:
    host: ${TRACKING_HOST}
    paths: ['/tracking/*']
serviceEndpoints:
  httpbin:
    url: 'https://httpbin.org'
  authorizerService:
    url: ${AUTHORIZER_URL}
  customerProfileService:
    url: ${CUSTOMER_PROFILE_URL}
  escortProfileService:
    url: ${ESCORT_PROFILE_URL}
  paymentService:
    url: ${PAYMENT_URL}
  claimService:
    url: ${CLAIM_URL}
  trackingService:
    url: ${TRACKING_URL}
  userService:
    url: ${USER_URL}
policies:
  - log
  - proxy
  - jwt
  - request-transformer
  - auth
  - role
  - producer-request-log
  - producer-connection-log
  - parser
pipelines:
  default:
    apiEndpoints:
      - api
    policies:
      - proxy:
          - action:
              serviceEndpoint: httpbin 
              changeOrigin: true
  authorizerWithRolePipeline:
    apiEndpoints:
      - authorizerWithRole
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.id
          - action:
              headers:
                add:
                  user-type: req.user.type
      - auth:
          - action:
              roles: Escort,Customer
              valueKey: header
  authorizerUsersPipeline:
    apiEndpoints:
      - authorizerOperations
    policies:
      - parser:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-roles: req.user.roles
          - action:
              headers:
                add:
                  user-id: req.user.id
      - role:
          - action:
              roles: SuperAdmin,Employee
      - producer-request-log:
      - proxy:
          - action:
              serviceEndpoint: authorizerService 
              changeOrigin: true
  userPipeline:
    apiEndpoints:
      - user
    policies:
      - parser:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-roles: req.user.roles
          - action:
              headers:
                add:
                  user-id: req.user.id
      - role:
          - action:
              roles: SuperAdmin,Employee
      - producer-request-log:
      - proxy:
          - action:
              serviceEndpoint: userService 
              changeOrigin: true
  authorizerPipeline:
    apiEndpoints:
      - authorizer
    policies:
      - parser:
      - producer-connection-log:
      - proxy:
          - action:
              serviceEndpoint: authorizerService 
              changeOrigin: true
  customerOperationsPipeline:
    apiEndpoints:
      - customerOperations
    policies:
      - parser:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-roles: req.user.roles
          - action:
              headers:
                add:
                  user-id: req.user.id
      - role:
          - action:
              roles: SuperAdmin,Employee
      - producer-request-log:
      - proxy:
          - action:
              serviceEndpoint: customerProfileService 
              changeOrigin: true
  customerProfileEscortPipeline:
    apiEndpoints:
      - customerProfileEscort
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.id
          - action:
              headers:
                add:
                  user-type: req.user.type
          - action:
              headers:
                add:
                  firebase-token: req.user.firebaseToken
      - auth:
          - action:
              roles: Escort
              valueKey: header
              mandatoryRole: Customer
  customerProfilePipeline:
    apiEndpoints:
      - customerProfile
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.id
          - action:
              headers:
                add:
                  user-type: req.user.type
          - action:
              headers:
                add:
                  firebase-token: req.user.firebaseToken
      - proxy:
          - action:
              serviceEndpoint: customerProfileService
              changeOrigin: true
  escortOperationsPipeline:
    apiEndpoints:
      - escortOperations
    policies:
      - parser:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-roles: req.user.roles
          - action:
              headers:
                add:
                  user-id: req.user.id
      - role:
          - action:
              roles: SuperAdmin,Employee
      - producer-request-log:
      - proxy:
          - action:
              serviceEndpoint: escortProfileService 
              changeOrigin: true
  escortProfileCustomerPipeline:
    apiEndpoints:
      - escortProfileCustomer
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.id
          - action:
              headers:
                add:
                  user-type: req.user.type
          - action:
              headers:
                add:
                  firebase-token: req.user.firebaseToken
      - auth:
          - action:
              roles: Customer,Organization
              valueKey: header
              mandatoryRole: Escort
      - proxy:
          - action:
              serviceEndpoint: escortProfileService
              changeOrigin: true
  escortProfilePipeline:
    apiEndpoints:
      - escortProfile
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.id
          - action:
              headers:
                add:
                  user-type: req.user.type
          - action:
              headers:
                add:
                  firebase-token: req.user.firebaseToken
      - auth:
          - action:
              roles: Escort
              valueKey: header
              mandatoryRole: Escort
      - proxy:
          - action:
              serviceEndpoint: escortProfileService
              changeOrigin: true
  paymentOnlyUsersPipeline:
    apiEndpoints:
      - paymentOnlyUsers
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-roles: req.user.roles
          - action:
              headers:
                add:
                  user-id: req.user.id
      - role:
          - action:
              roles: Employee,SuperAdmin
  paymentPipeline:
    apiEndpoints:
      - payment
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              body:
                add:
                  user: req.user
      - proxy:
          - action:
              serviceEndpoint: paymentService
              changeOrigin: true
  claimWithRolePipeline:
      apiEndpoints:
        - claimWithRole
      policies:
        - jwt:
            - action:
                secretOrPublicKey: ${SECRET_KEY}
                checkCredentialExistence: false
        - request-transformer:
            - action:
                headers:
                  add:
                    user-id: req.user.id
            - action:
                headers:
                  add:
                    user-type: req.user.type
            - action:
                headers:
                  add:
                    firebase-token: req.user.firebaseToken
        - auth:
            - action:
                roles: User
                valueKey: header
  claimPipeline:
      apiEndpoints:
        - claim
      policies:
        - jwt:
            - action:
                secretOrPublicKey: ${SECRET_KEY}
                checkCredentialExistence: false
        - request-transformer:
            - action:
                headers:
                  add:
                    user-id: req.user.id
            - action:
                headers:
                  add:
                    user-type: req.user.type
            - action:
                headers:
                  add:
                    firebase-token: req.user.firebaseToken
        - proxy:
            - action:
                serviceEndpoint: claimService
                changeOrigin: true
  trackingPipeline:
      apiEndpoints:
        - tracking
      policies:
        - jwt:
            - action:
                secretOrPublicKey: ${SECRET_KEY}
                checkCredentialExistence: false
        - request-transformer:
            - action:
                headers:
                  add:
                    user-id: req.user.id
            - action:
                headers:
                  add:
                    user-type: req.user.type
            - action:
                headers:
                  add:
                    firebase-token: req.user.firebaseToken
        - proxy:
            - action:
                serviceEndpoint: trackingService
                changeOrigin: true
